package com.kh.day05.array;

public class Exam_SortBubble {
	public static void main (String [] args) {
		// 정렬 알고리즘
		// 1. 삽입정렬 (Insertion)
		// 2. 선택정렬
		// 3. 버블정렬
		
		// ** 버블정렬이란?
		// 인접한 두 개의 원소를 검사하여 정렬하는 방법
		// 구현이 쉽다는 장점이 있고, 이미 정렬된 데이터를 정렬할 때 가장 빠름.
		// 기본적으로 다른 정렬에 비해 정렬 속도가 느리며, 역순으로 정렬할 때
		// 가장 느림.
		
		// {2, 5, 4, 1, 3}	=> 비교횟수 : 4
		// i = 0 일 때		=> 비교횟수 : 3
		// 2, 5, 4, 1, 3 
		// 2, 4, 5, 1, 3 
		// 2, 4, 1, 5, 3
		// 2, 4, 1, 3, 5
		// i = 1 일 때 (2, 4, 1, 3, 5 > '5 고정')	=> 비교횟수 : 2
		// 2, 4, 1, 3, 5
		// 2, 1, 4, 3, 5
		// 2, 1, 3, 4, 5
		// 2, 1, 3, 4, 5
		// i = 2 일 때 (2, 1, 3, 4, 5 > '4 5 고정')	=> 비교횟수 : 1
		// 1, 2, 3, 4, 5
		// 1, 2, 3, 4, 5
		
		int [] arrs = {2, 5, 4, 1, 3};
		for(int i = 0; i < arrs.length-1; i++) {
			// j가 감소하는 것은 맞지만 j--를 사용하게되면 앞의 숫자 '2, 5'부터 
			// 비교하는 것이 아닌 뒤의 숫자 '1, 3'을 먼저 비교하기때문에 맞지 않다.
			for(int j = 0; j < (arrs.length-1)-i; j++) {
				// 최대값이 감소해야한다. = i값이 증가하며 감소해야한다.
				if(arrs[j] > arrs[j+1]) {
					int temp = arrs[j+1];
					arrs[j+1] = arrs[j];
					arrs[j] = temp;
				}
			}
		}
		for(int i = 0; i < arrs.length; i++) {
			System.out.print(arrs[i] + " ");
		}
	}
}
